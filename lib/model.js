"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Model = void 0;

var _collection = require("./collection");

var _hasEvent = require("./has-event");

var _db = require("./db");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Model extends _hasEvent.HasEvent {
  constructor(data) {
    super();

    _defineProperty(this, "fillables", void 0);

    _defineProperty(this, "data", {});

    _defineProperty(this, "type", Model);

    this.booting();
    this.fillables = this.fillable();

    if (!this.name || this.name.length === 0) {
      this.name = this.constructor.name.toLowerCase();
    }

    if (!('id' in this.data)) {
      this.data.id === '';
    }

    if (data !== undefined) {
      this.fill(data);
    }

    this.booted();
  }

  static createQueryBuilder() {
    return new this();
  }

  fillable() {
    return [];
  }

  booting() {}

  booted() {}

  entries() {
    return Object.entries(this.getData());
  }

  values() {
    return Object.values(this.getData());
  }

  keys() {
    return Object.keys(this.getData());
  }

  getTableName() {
    return this.name;
  }

  toJSON() {
    return this.getData();
  }

  toRawData() {
    return _objectSpread({}, this.data);
  }

  static make(data) {
    return new this(data);
  }

  async paginate(page, perPage) {
    try {
      let collection = this.getCollection();
      this.queries.forEach(query => {
        switch (query.method) {
          case 'where':
            const {
              operator,
              value
            } = query;
            collection = collection.where(query.key, operator, value);
            break;

          case 'whereIn':
            const {
              values
            } = query;
            values.forEach(value => {
              collection = collection.where(query.key, '==', value);
            });
            break;

          case 'whereNotIn':
            query.values.forEach(value => {
              collection = collection.where(query.key, '!=', value);
            });
            break;

          case 'limit':
            collection = collection.limit(query.amount);
            break;
        }
      });
      const snapshot = await collection.orderBy('id').startAt(perPage * (page - 1)).limit(perPage).get();
      const data = new _collection.Collection();
      snapshot.forEach(document => {
        const body = _objectSpread(_objectSpread({}, document.data()), {}, {
          id: document.id
        });

        const instance = new this.type();
        instance.forceFill(body);
        data.push(instance);
      });
      return data;
    } catch (error) {
      throw error;
    } finally {
      this.clearQueries();
    }
  }

  async findOne(id) {
    try {
      const document = await this.getCollection().doc(id).get();

      if (!document.exists) {
        return null;
      }

      const body = _objectSpread(_objectSpread({}, document.data()), {}, {
        id: document.id
      });

      this.forceFill(body);
      return this;
    } catch (error) {
      console.error(error);
      return null;
    } finally {
      this.clearQueries();
    }
  }

  async findOneOrFail(id) {
    const model = await this.findOne(id);

    if (!model) {
      throw new Error('Model does not exist.');
    }

    return model;
  }

  getCollection() {
    return (0, _db.makeCollection)(this.getTableName());
  }

  fill(data) {
    for (const [key, value] of Object.entries(data)) {
      if (this.fillables.find(filler => filler === key) !== undefined || this.fillables.includes(key)) {
        this.set(key, value);
      }
    }

    return this;
  }

  forceFill(data) {
    for (const [key, value] of Object.entries(data)) {
      this.set(key, value);
    }

    return this;
  }

  async count() {
    const collection = await this.all();
    return collection.length;
  }

  async delete() {
    try {
      this.callEvent('deleting');
      let collection = this.getCollection();
      await collection.doc(this.id()).delete();
      this.callEvent('deleted');
      return;
    } catch (error) {
      throw error;
    } finally {
      this.clearQueries();
    }
  }

  set(key, value) {
    this.data[key] = value;
    return this;
  }

  get(key) {
    if (!(key in this.data)) {
      return null;
    }

    const value = this.data[key];

    if (value instanceof Model) {
      return value.getData();
    } else if (value instanceof _collection.Collection) {
      return value.toJSON();
    } else if (Array.isArray(value)) {
      return value.map(item => {
        if (item instanceof Model) {
          return item.getData();
        }

        return item;
      });
    }

    return value;
  }

  getData() {
    const data = {};

    for (const key in this.data) {
      const value = this.data[key];

      if (value instanceof Model) {
        data[key] = value.getData();
      } else if (value instanceof _collection.Collection) {
        data[key] = value.toJSON();
      } else if (Array.isArray(value)) {
        data[key] = value.map(item => {
          if (item instanceof Model) {
            return item.getData();
          }

          return item;
        });
      } else {
        data[key] = value;
      }
    }

    return data;
  }

  async first() {
    const collection = await this.limit(1).getAll();

    if (collection.length > 0) {
      return collection[0];
    }

    return null;
  }

  async firstOrFail() {
    const item = await this.first();

    if (!item) {
      throw new Error('Model does not exist.');
    }

    return item;
  }

  async getAll() {
    try {
      let collection = this.getCollection();
      this.queries.forEach(query => {
        switch (query.method) {
          case 'where':
            const {
              operator,
              value
            } = query;
            collection = collection.where(query.key, operator, value);
            break;

          case 'whereIn':
            const {
              values
            } = query;
            values.forEach(value => {
              collection = collection.where(query.key, '==', value);
            });
            break;

          case 'whereNotIn':
            query.values.forEach(value => {
              collection = collection.where(query.key, '!=', value);
            });
            break;

          case 'limit':
            collection = collection.limit(query.amount);
            break;
        }
      });
      const snapshot = await collection.get();
      const data = new _collection.Collection();
      snapshot.forEach(document => {
        const body = _objectSpread(_objectSpread({}, document.data()), {}, {
          id: document.id
        });

        const instance = new this.type();
        instance.forceFill(body);
        data.push(instance);
      });
      return data;
    } catch (error) {
      throw error;
    } finally {
      this.clearQueries();
    }
  }

  withoutRelations() {
    const data = {};

    for (const key in this.data) {
      const value = this.data[key];

      if (value instanceof Model === false && value instanceof _collection.Collection === false) {
        data[key] = value;
      }
    }

    return data;
  }

  async load(relations) {
    const operations = relations.map(relation => this[relation]().get());
    const results = await Promise.all(operations);
    results.forEach((data, index) => {
      const name = relations[index];
      this.set(name, data);
    });
    return this;
  }

  all() {
    return this.getAll();
  }

  async create(data) {
    if (data) {
      this.fill(data);
    }

    this.set('created_at', new Date().toJSON());
    this.set('updated_at', new Date().toJSON());
    this.callEvent('creating').callEvent('saving');
    const ref = this.getCollection().doc();

    const payload = _objectSpread(_objectSpread({}, this.withoutRelations()), {}, {
      id: ref.id
    });

    await ref.set(payload);
    this.forceFill(payload);
    this.callEvent('created').callEvent('saved');
    return this;
  }

  async update(data) {
    if (data) {
      this.fill(data);
    }

    const oldUpdatedAt = this.get('updated_at');

    try {
      this.callEvent('updating').callEvent('saving');
      this.set('updated_at', new Date().toJSON());
      const data = this.withoutRelations();
      await this.getCollection().doc(data.id).set(data);
      this.callEvent('updated').callEvent('saved');
      return this;
    } catch (error) {
      this.set('updated_at', oldUpdatedAt);
      throw error;
    }
  }

  id() {
    return this.get('id');
  }

  save(data) {
    if (data) {
      this.fill(data);
    }

    return this.has('id') ? this.update() : this.create();
  }

  unset(key) {
    delete this.data[key];
    return this;
  }

  has(key) {
    return key in this.data || this.get(key) !== null;
  }

}

exports.Model = Model;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,