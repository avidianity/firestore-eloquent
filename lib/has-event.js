"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HasEvent = void 0;

var _hasRelationship = require("./has-relationship");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const events = {
  creating: {},
  created: {},
  updating: {},
  updated: {},
  deleting: {},
  deleted: {},
  saving: {},
  saved: {}
};

class HasEvent extends _hasRelationship.HasRelationship {
  constructor() {
    super();

    _defineProperty(this, "name", void 0);

    this.name = '';
  }

  creating(callback) {
    return this.registerEvent('creating', callback);
  }

  created(callback) {
    return this.registerEvent('created', callback);
  }

  updating(callback) {
    return this.registerEvent('updating', callback);
  }

  updated(callback) {
    return this.registerEvent('updated', callback);
  }

  deleting(callback) {
    return this.registerEvent('deleting', callback);
  }

  deleted(callback) {
    return this.registerEvent('deleted', callback);
  }

  saving(callback) {
    return this.registerEvent('saving', callback);
  }

  saved(callback) {
    return this.registerEvent('saved', callback);
  }

  callEvent(name) {
    if (this.name in events[name]) {
      const callback = events[name][this.name];
      callback(this);
    }

    return this;
  }

  registerEvent(name, callback) {
    if (!(this.name in events[name])) {
      events[name][this.name] = callback.bind(this);
    }

    return this;
  }

}

exports.HasEvent = HasEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oYXMtZXZlbnQudHMiXSwibmFtZXMiOlsiZXZlbnRzIiwiY3JlYXRpbmciLCJjcmVhdGVkIiwidXBkYXRpbmciLCJ1cGRhdGVkIiwiZGVsZXRpbmciLCJkZWxldGVkIiwic2F2aW5nIiwic2F2ZWQiLCJIYXNFdmVudCIsIkhhc1JlbGF0aW9uc2hpcCIsImNvbnN0cnVjdG9yIiwibmFtZSIsImNhbGxiYWNrIiwicmVnaXN0ZXJFdmVudCIsImNhbGxFdmVudCIsImJpbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7OztBQVVBLE1BQU1BLE1BQU0sR0FBRztBQUNkQyxFQUFBQSxRQUFRLEVBQUUsRUFESTtBQUVkQyxFQUFBQSxPQUFPLEVBQUUsRUFGSztBQUdkQyxFQUFBQSxRQUFRLEVBQUUsRUFISTtBQUlkQyxFQUFBQSxPQUFPLEVBQUUsRUFKSztBQUtkQyxFQUFBQSxRQUFRLEVBQUUsRUFMSTtBQU1kQyxFQUFBQSxPQUFPLEVBQUUsRUFOSztBQU9kQyxFQUFBQSxNQUFNLEVBQUUsRUFQTTtBQVFkQyxFQUFBQSxLQUFLLEVBQUU7QUFSTyxDQUFmOztBQVdPLE1BQWVDLFFBQWYsU0FBcURDLGdDQUFyRCxDQUF3RTtBQUc5RUMsRUFBQUEsV0FBVyxHQUFHO0FBQ2I7O0FBRGE7O0FBRWIsU0FBS0MsSUFBTCxHQUFZLEVBQVo7QUFDQTs7QUFFRFgsRUFBQUEsUUFBUSxDQUFDWSxRQUFELEVBQW9DO0FBQzNDLFdBQU8sS0FBS0MsYUFBTCxDQUFtQixVQUFuQixFQUErQkQsUUFBL0IsQ0FBUDtBQUNBOztBQUNEWCxFQUFBQSxPQUFPLENBQUNXLFFBQUQsRUFBb0M7QUFDMUMsV0FBTyxLQUFLQyxhQUFMLENBQW1CLFNBQW5CLEVBQThCRCxRQUE5QixDQUFQO0FBQ0E7O0FBQ0RWLEVBQUFBLFFBQVEsQ0FBQ1UsUUFBRCxFQUFvQztBQUMzQyxXQUFPLEtBQUtDLGFBQUwsQ0FBbUIsVUFBbkIsRUFBK0JELFFBQS9CLENBQVA7QUFDQTs7QUFDRFQsRUFBQUEsT0FBTyxDQUFDUyxRQUFELEVBQW9DO0FBQzFDLFdBQU8sS0FBS0MsYUFBTCxDQUFtQixTQUFuQixFQUE4QkQsUUFBOUIsQ0FBUDtBQUNBOztBQUNEUixFQUFBQSxRQUFRLENBQUNRLFFBQUQsRUFBb0M7QUFDM0MsV0FBTyxLQUFLQyxhQUFMLENBQW1CLFVBQW5CLEVBQStCRCxRQUEvQixDQUFQO0FBQ0E7O0FBQ0RQLEVBQUFBLE9BQU8sQ0FBQ08sUUFBRCxFQUFvQztBQUMxQyxXQUFPLEtBQUtDLGFBQUwsQ0FBbUIsU0FBbkIsRUFBOEJELFFBQTlCLENBQVA7QUFDQTs7QUFDRE4sRUFBQUEsTUFBTSxDQUFDTSxRQUFELEVBQW9DO0FBQ3pDLFdBQU8sS0FBS0MsYUFBTCxDQUFtQixRQUFuQixFQUE2QkQsUUFBN0IsQ0FBUDtBQUNBOztBQUNETCxFQUFBQSxLQUFLLENBQUNLLFFBQUQsRUFBb0M7QUFDeEMsV0FBTyxLQUFLQyxhQUFMLENBQW1CLE9BQW5CLEVBQTRCRCxRQUE1QixDQUFQO0FBQ0E7O0FBRVNFLEVBQUFBLFNBQVMsQ0FBQ0gsSUFBRCxFQUFtQjtBQUNyQyxRQUFJLEtBQUtBLElBQUwsSUFBYVosTUFBTSxDQUFDWSxJQUFELENBQXZCLEVBQStCO0FBQzlCLFlBQU1DLFFBQVEsR0FBR2IsTUFBTSxDQUFDWSxJQUFELENBQU4sQ0FBYSxLQUFLQSxJQUFsQixDQUFqQjtBQUNBQyxNQUFBQSxRQUFRLENBQUMsSUFBRCxDQUFSO0FBQ0E7O0FBQ0QsV0FBTyxJQUFQO0FBQ0E7O0FBRVNDLEVBQUFBLGFBQWEsQ0FBQ0YsSUFBRCxFQUFtQkMsUUFBbkIsRUFBNkM7QUFDbkUsUUFBSSxFQUFFLEtBQUtELElBQUwsSUFBYVosTUFBTSxDQUFDWSxJQUFELENBQXJCLENBQUosRUFBa0M7QUFDakNaLE1BQUFBLE1BQU0sQ0FBQ1ksSUFBRCxDQUFOLENBQWEsS0FBS0EsSUFBbEIsSUFBMEJDLFFBQVEsQ0FBQ0csSUFBVCxDQUFjLElBQWQsQ0FBMUI7QUFDQTs7QUFDRCxXQUFPLElBQVA7QUFDQTs7QUE5QzZFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kZWxEYXRhIH0gZnJvbSAnLi9jb250cmFjdHMnO1xuaW1wb3J0IHsgSGFzUmVsYXRpb25zaGlwIH0gZnJvbSAnLi9oYXMtcmVsYXRpb25zaGlwJztcblxuZXhwb3J0IHR5cGUgRXZlbnRUeXBlcyA9ICdjcmVhdGluZycgfCAnY3JlYXRlZCcgfCAndXBkYXRpbmcnIHwgJ3VwZGF0ZWQnIHwgJ2RlbGV0aW5nJyB8ICdkZWxldGVkJyB8ICdzYXZpbmcnIHwgJ3NhdmVkJztcblxuZXhwb3J0IHR5cGUgQ2FsbGJhY2s8VCA9IGFueT4gPSAobW9kZWw6IFQpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEV2ZW50ID0ge1xuXHRba2V5OiBzdHJpbmddOiBDYWxsYmFjaztcbn07XG5cbmNvbnN0IGV2ZW50cyA9IHtcblx0Y3JlYXRpbmc6IHt9IGFzIEV2ZW50LFxuXHRjcmVhdGVkOiB7fSBhcyBFdmVudCxcblx0dXBkYXRpbmc6IHt9IGFzIEV2ZW50LFxuXHR1cGRhdGVkOiB7fSBhcyBFdmVudCxcblx0ZGVsZXRpbmc6IHt9IGFzIEV2ZW50LFxuXHRkZWxldGVkOiB7fSBhcyBFdmVudCxcblx0c2F2aW5nOiB7fSBhcyBFdmVudCxcblx0c2F2ZWQ6IHt9IGFzIEV2ZW50LFxufTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEhhc0V2ZW50PFQgZXh0ZW5kcyBNb2RlbERhdGE+IGV4dGVuZHMgSGFzUmVsYXRpb25zaGlwPFQ+IHtcblx0cHJvdGVjdGVkIG5hbWU6IHN0cmluZztcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMubmFtZSA9ICcnO1xuXHR9XG5cblx0Y3JlYXRpbmcoY2FsbGJhY2s6ICh0aGlzQXJnOiB0aGlzKSA9PiB2b2lkKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVnaXN0ZXJFdmVudCgnY3JlYXRpbmcnLCBjYWxsYmFjayk7XG5cdH1cblx0Y3JlYXRlZChjYWxsYmFjazogKHRoaXNBcmc6IHRoaXMpID0+IHZvaWQpIHtcblx0XHRyZXR1cm4gdGhpcy5yZWdpc3RlckV2ZW50KCdjcmVhdGVkJywgY2FsbGJhY2spO1xuXHR9XG5cdHVwZGF0aW5nKGNhbGxiYWNrOiAodGhpc0FyZzogdGhpcykgPT4gdm9pZCkge1xuXHRcdHJldHVybiB0aGlzLnJlZ2lzdGVyRXZlbnQoJ3VwZGF0aW5nJywgY2FsbGJhY2spO1xuXHR9XG5cdHVwZGF0ZWQoY2FsbGJhY2s6ICh0aGlzQXJnOiB0aGlzKSA9PiB2b2lkKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVnaXN0ZXJFdmVudCgndXBkYXRlZCcsIGNhbGxiYWNrKTtcblx0fVxuXHRkZWxldGluZyhjYWxsYmFjazogKHRoaXNBcmc6IHRoaXMpID0+IHZvaWQpIHtcblx0XHRyZXR1cm4gdGhpcy5yZWdpc3RlckV2ZW50KCdkZWxldGluZycsIGNhbGxiYWNrKTtcblx0fVxuXHRkZWxldGVkKGNhbGxiYWNrOiAodGhpc0FyZzogdGhpcykgPT4gdm9pZCkge1xuXHRcdHJldHVybiB0aGlzLnJlZ2lzdGVyRXZlbnQoJ2RlbGV0ZWQnLCBjYWxsYmFjayk7XG5cdH1cblx0c2F2aW5nKGNhbGxiYWNrOiAodGhpc0FyZzogdGhpcykgPT4gdm9pZCkge1xuXHRcdHJldHVybiB0aGlzLnJlZ2lzdGVyRXZlbnQoJ3NhdmluZycsIGNhbGxiYWNrKTtcblx0fVxuXHRzYXZlZChjYWxsYmFjazogKHRoaXNBcmc6IHRoaXMpID0+IHZvaWQpIHtcblx0XHRyZXR1cm4gdGhpcy5yZWdpc3RlckV2ZW50KCdzYXZlZCcsIGNhbGxiYWNrKTtcblx0fVxuXG5cdHByb3RlY3RlZCBjYWxsRXZlbnQobmFtZTogRXZlbnRUeXBlcykge1xuXHRcdGlmICh0aGlzLm5hbWUgaW4gZXZlbnRzW25hbWVdKSB7XG5cdFx0XHRjb25zdCBjYWxsYmFjayA9IGV2ZW50c1tuYW1lXVt0aGlzLm5hbWVdO1xuXHRcdFx0Y2FsbGJhY2sodGhpcyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHJvdGVjdGVkIHJlZ2lzdGVyRXZlbnQobmFtZTogRXZlbnRUeXBlcywgY2FsbGJhY2s6IENhbGxiYWNrPHRoaXM+KSB7XG5cdFx0aWYgKCEodGhpcy5uYW1lIGluIGV2ZW50c1tuYW1lXSkpIHtcblx0XHRcdGV2ZW50c1tuYW1lXVt0aGlzLm5hbWVdID0gY2FsbGJhY2suYmluZCh0aGlzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn1cbiJdfQ==