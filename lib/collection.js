"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collection = void 0;

class Collection extends Array {
  async load(relations) {
    const results = await Promise.all(this.map(item => item.load(relations)));
    results.forEach((item, index) => this.splice(index, 1, item));
    return this;
  }

  toJSON() {
    return this.toArray().map(item => item.toJSON ? item.toJSON() : item);
  }

  async save() {
    const items = await Promise.all(this.map(item => item.save()));
    return new Collection(...items);
  }

  async delete() {
    await Promise.all(this.map(item => item.delete()));
  }

  includes(model) {
    const match = this.find(item => item.get('id') === model.get('id'));
    return match || super.includes(model) ? true : false;
  }

  indexOf(model) {
    const index = this.findIndex(item => item.get('id') === model.get('id'));
    return index;
  }

  replace(model, index) {
    if (index !== undefined) {
      return this.splice(index, 1, model);
    }

    const modelIndex = this.indexOf(model);
    return this.splice(modelIndex, 1, model);
  }

  remove(index) {
    return this.splice(index, 1);
  }

  get(item) {
    if (typeof item === 'string') {
      return this.find(i => i.get('id') === item);
    }

    return this.find(i => i.get('id') === item.get('id'));
  }

  set(item) {
    if (this.includes(item)) {
      this.replace(item, this.indexOf(item));
    } else {
      this.push(item);
    }

    return this;
  }

  toArray() {
    return Array.from(this);
  }

}

exports.Collection = Collection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbIkNvbGxlY3Rpb24iLCJBcnJheSIsImxvYWQiLCJyZWxhdGlvbnMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsIml0ZW0iLCJmb3JFYWNoIiwiaW5kZXgiLCJzcGxpY2UiLCJ0b0pTT04iLCJ0b0FycmF5Iiwic2F2ZSIsIml0ZW1zIiwiZGVsZXRlIiwiaW5jbHVkZXMiLCJtb2RlbCIsIm1hdGNoIiwiZmluZCIsImdldCIsImluZGV4T2YiLCJmaW5kSW5kZXgiLCJyZXBsYWNlIiwidW5kZWZpbmVkIiwibW9kZWxJbmRleCIsInJlbW92ZSIsImkiLCJzZXQiLCJwdXNoIiwiZnJvbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdPLE1BQU1BLFVBQU4sU0FBMkVDLEtBQTNFLENBQW9GO0FBQ2hGLFFBQUpDLElBQUksQ0FBQ0MsU0FBRCxFQUEyQjtBQUNwQyxVQUFNQyxPQUFPLEdBQUcsTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVksS0FBS0MsR0FBTCxDQUFVQyxJQUFELElBQVVBLElBQUksQ0FBQ04sSUFBTCxDQUFVQyxTQUFWLENBQW5CLENBQVosQ0FBdEI7QUFDQUMsSUFBQUEsT0FBTyxDQUFDSyxPQUFSLENBQWdCLENBQUNELElBQUQsRUFBT0UsS0FBUCxLQUFpQixLQUFLQyxNQUFMLENBQVlELEtBQVosRUFBbUIsQ0FBbkIsRUFBc0JGLElBQXRCLENBQWpDO0FBQ0EsV0FBTyxJQUFQO0FBQ0E7O0FBRURJLEVBQUFBLE1BQU0sR0FBUTtBQUNiLFdBQU8sS0FBS0MsT0FBTCxHQUFlTixHQUFmLENBQW9CQyxJQUFELElBQVdBLElBQUksQ0FBQ0ksTUFBTCxHQUFjSixJQUFJLENBQUNJLE1BQUwsRUFBZCxHQUE4QkosSUFBNUQsQ0FBUDtBQUNBOztBQUVTLFFBQUpNLElBQUksR0FBOEI7QUFDdkMsVUFBTUMsS0FBSyxHQUFHLE1BQU1WLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQUtDLEdBQUwsQ0FBVUMsSUFBRCxJQUFVQSxJQUFJLENBQUNNLElBQUwsRUFBbkIsQ0FBWixDQUFwQjtBQUNBLFdBQU8sSUFBSWQsVUFBSixDQUFlLEdBQUdlLEtBQWxCLENBQVA7QUFDQTs7QUFFVyxRQUFOQyxNQUFNLEdBQUc7QUFDZCxVQUFNWCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFLQyxHQUFMLENBQVVDLElBQUQsSUFBVUEsSUFBSSxDQUFDUSxNQUFMLEVBQW5CLENBQVosQ0FBTjtBQUNBOztBQUVEQyxFQUFBQSxRQUFRLENBQUNDLEtBQUQsRUFBVztBQUNsQixVQUFNQyxLQUFLLEdBQUcsS0FBS0MsSUFBTCxDQUFXWixJQUFELElBQVVBLElBQUksQ0FBQ2EsR0FBTCxDQUFTLElBQVQsTUFBbUJILEtBQUssQ0FBQ0csR0FBTixDQUFVLElBQVYsQ0FBdkMsQ0FBZDtBQUNBLFdBQU9GLEtBQUssSUFBSSxNQUFNRixRQUFOLENBQWVDLEtBQWYsQ0FBVCxHQUFpQyxJQUFqQyxHQUF3QyxLQUEvQztBQUNBOztBQUVESSxFQUFBQSxPQUFPLENBQUNKLEtBQUQsRUFBVztBQUNqQixVQUFNUixLQUFLLEdBQUcsS0FBS2EsU0FBTCxDQUFnQmYsSUFBRCxJQUFVQSxJQUFJLENBQUNhLEdBQUwsQ0FBUyxJQUFULE1BQW1CSCxLQUFLLENBQUNHLEdBQU4sQ0FBVSxJQUFWLENBQTVDLENBQWQ7QUFDQSxXQUFPWCxLQUFQO0FBQ0E7O0FBRURjLEVBQUFBLE9BQU8sQ0FBQ04sS0FBRCxFQUFXUixLQUFYLEVBQTJCO0FBQ2pDLFFBQUlBLEtBQUssS0FBS2UsU0FBZCxFQUF5QjtBQUN4QixhQUFPLEtBQUtkLE1BQUwsQ0FBWUQsS0FBWixFQUFtQixDQUFuQixFQUFzQlEsS0FBdEIsQ0FBUDtBQUNBOztBQUNELFVBQU1RLFVBQVUsR0FBRyxLQUFLSixPQUFMLENBQWFKLEtBQWIsQ0FBbkI7QUFDQSxXQUFPLEtBQUtQLE1BQUwsQ0FBWWUsVUFBWixFQUF3QixDQUF4QixFQUEyQlIsS0FBM0IsQ0FBUDtBQUNBOztBQUVEUyxFQUFBQSxNQUFNLENBQUNqQixLQUFELEVBQWdCO0FBQ3JCLFdBQU8sS0FBS0MsTUFBTCxDQUFZRCxLQUFaLEVBQW1CLENBQW5CLENBQVA7QUFDQTs7QUFFRFcsRUFBQUEsR0FBRyxDQUFDYixJQUFELEVBQW1CO0FBQ3JCLFFBQUksT0FBT0EsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUM3QixhQUFPLEtBQUtZLElBQUwsQ0FBV1EsQ0FBRCxJQUFPQSxDQUFDLENBQUNQLEdBQUYsQ0FBTSxJQUFOLE1BQWdCYixJQUFqQyxDQUFQO0FBQ0E7O0FBRUQsV0FBTyxLQUFLWSxJQUFMLENBQVdRLENBQUQsSUFBT0EsQ0FBQyxDQUFDUCxHQUFGLENBQU0sSUFBTixNQUFnQmIsSUFBSSxDQUFDYSxHQUFMLENBQVMsSUFBVCxDQUFqQyxDQUFQO0FBQ0E7O0FBRURRLEVBQUFBLEdBQUcsQ0FBQ3JCLElBQUQsRUFBVTtBQUNaLFFBQUksS0FBS1MsUUFBTCxDQUFjVCxJQUFkLENBQUosRUFBeUI7QUFDeEIsV0FBS2dCLE9BQUwsQ0FBYWhCLElBQWIsRUFBbUIsS0FBS2MsT0FBTCxDQUFhZCxJQUFiLENBQW5CO0FBQ0EsS0FGRCxNQUVPO0FBQ04sV0FBS3NCLElBQUwsQ0FBVXRCLElBQVY7QUFDQTs7QUFFRCxXQUFPLElBQVA7QUFDQTs7QUFFREssRUFBQUEsT0FBTyxHQUFHO0FBQ1QsV0FBT1osS0FBSyxDQUFDOEIsSUFBTixDQUFXLElBQVgsQ0FBUDtBQUNBOztBQTlEeUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2RlbERhdGEgfSBmcm9tICcuL2NvbnRyYWN0cyc7XG5pbXBvcnQgeyBNb2RlbCB9IGZyb20gJy4vbW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbjxUIGV4dGVuZHMgTW9kZWwgPSBhbnksIEQgZXh0ZW5kcyBNb2RlbERhdGEgPSBhbnk+IGV4dGVuZHMgQXJyYXk8VD4ge1xuXHRhc3luYyBsb2FkKHJlbGF0aW9uczogQXJyYXk8c3RyaW5nPikge1xuXHRcdGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLm1hcCgoaXRlbSkgPT4gaXRlbS5sb2FkKHJlbGF0aW9ucykpKTtcblx0XHRyZXN1bHRzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB0aGlzLnNwbGljZShpbmRleCwgMSwgaXRlbSkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0dG9KU09OKCk6IERbXSB7XG5cdFx0cmV0dXJuIHRoaXMudG9BcnJheSgpLm1hcCgoaXRlbSkgPT4gKGl0ZW0udG9KU09OID8gaXRlbS50b0pTT04oKSA6IGl0ZW0pKTtcblx0fVxuXG5cdGFzeW5jIHNhdmUoKTogUHJvbWlzZTxDb2xsZWN0aW9uPFQsIEQ+PiB7XG5cdFx0Y29uc3QgaXRlbXMgPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLm1hcCgoaXRlbSkgPT4gaXRlbS5zYXZlKCkpKTtcblx0XHRyZXR1cm4gbmV3IENvbGxlY3Rpb24oLi4uaXRlbXMpO1xuXHR9XG5cblx0YXN5bmMgZGVsZXRlKCkge1xuXHRcdGF3YWl0IFByb21pc2UuYWxsKHRoaXMubWFwKChpdGVtKSA9PiBpdGVtLmRlbGV0ZSgpKSk7XG5cdH1cblxuXHRpbmNsdWRlcyhtb2RlbDogVCkge1xuXHRcdGNvbnN0IG1hdGNoID0gdGhpcy5maW5kKChpdGVtKSA9PiBpdGVtLmdldCgnaWQnKSA9PT0gbW9kZWwuZ2V0KCdpZCcpKTtcblx0XHRyZXR1cm4gbWF0Y2ggfHwgc3VwZXIuaW5jbHVkZXMobW9kZWwpID8gdHJ1ZSA6IGZhbHNlO1xuXHR9XG5cblx0aW5kZXhPZihtb2RlbDogVCkge1xuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0uZ2V0KCdpZCcpID09PSBtb2RlbC5nZXQoJ2lkJykpO1xuXHRcdHJldHVybiBpbmRleDtcblx0fVxuXG5cdHJlcGxhY2UobW9kZWw6IFQsIGluZGV4PzogbnVtYmVyKSB7XG5cdFx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMSwgbW9kZWwpO1xuXHRcdH1cblx0XHRjb25zdCBtb2RlbEluZGV4ID0gdGhpcy5pbmRleE9mKG1vZGVsKTtcblx0XHRyZXR1cm4gdGhpcy5zcGxpY2UobW9kZWxJbmRleCwgMSwgbW9kZWwpO1xuXHR9XG5cblx0cmVtb3ZlKGluZGV4OiBudW1iZXIpIHtcblx0XHRyZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHR9XG5cblx0Z2V0KGl0ZW06IHN0cmluZyB8IFQpIHtcblx0XHRpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5maW5kKChpKSA9PiBpLmdldCgnaWQnKSA9PT0gaXRlbSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZCgoaSkgPT4gaS5nZXQoJ2lkJykgPT09IGl0ZW0uZ2V0KCdpZCcpKTtcblx0fVxuXG5cdHNldChpdGVtOiBUKSB7XG5cdFx0aWYgKHRoaXMuaW5jbHVkZXMoaXRlbSkpIHtcblx0XHRcdHRoaXMucmVwbGFjZShpdGVtLCB0aGlzLmluZGV4T2YoaXRlbSkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnB1c2goaXRlbSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHR0b0FycmF5KCkge1xuXHRcdHJldHVybiBBcnJheS5mcm9tKHRoaXMpO1xuXHR9XG59XG4iXX0=